// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model profile {
  id           String         @id @default(cuid())
  firstName    String         @db.VarChar(255)
  lastName     String?
  email        String         @unique
  validEmail   Boolean        @default(false)
  password     String
  gender       String?
  dob          DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  wishlist     String[]
  shippingInfo shippingInfo[]
  cart         cartItem[]
  orders       order[]
}

model shippingInfo {
  id        String   @id @default(cuid())
  profileId String?
  address   String
  city      String
  state     String
  zip       String
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profile   profile? @relation(fields: [profileId], references: [id])
}

model cartItem {
  id        String  @id @default(cuid())
  buyerId   String
  productId String
  quantity  Int
  profile   profile @relation(fields: [buyerId], references: [id], onUpdate: Cascade)

  @@unique([buyerId, productId])
}

model order {
  id           String      @id @default(cuid())
  createdBy    String
  status       String
  orderItem    orderItem[]
  shippingInfo String
  contactInfo  String
  billingId    String
  createdAt    DateTime    @default(now())
  profile      profile     @relation(fields: [createdBy], references: [id], onUpdate: Cascade)
  billing      billing     @relation(fields: [billingId], references: [id], onUpdate: Cascade)
}

model orderItem {
  id       String  @id @default(cuid())
  orderId  String?
  name     Int
  quantity Int
  price    Float
  order    order?  @relation(fields: [orderId], references: [id], onUpdate: Cascade)
}

model billing {
  id        String   @id @default(cuid())
  method    String
  amount    Float
  refunded  Boolean  @default(false)
  status    String
  paidBy    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     order[]
}
